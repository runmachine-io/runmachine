syntax = "proto3";

package runm;

import "filter.proto";
import "object_type.proto";
import "property.proto";

// An externally-referenceable object in the runm system. All objects in the
// system have a type, an external name, a generation integer representing the
// number of times the object has changed and a UUID.
//
// The runm-metadata service keeps track of the mapping of external names to
// UUIDs for all objects it knows about. Therefore, other services in the runm
// deployment -- such as runm-resource -- only need to store the UUID
// identifier for various concrete objects it manages.
//
// For example, the runm-resource service manages *providers*. The
// runm-resource database stores provider records, with each record having a
// uuid field indicating the external record identifier for the provider.
// However, adminstrators and users probably don't want to refer to a
// particular compute host with a UUID. Instead, the user prefers to refer to
// the compute host using a common hostname. The runm-metadata service is
// responsible for mapping those external names and object types (in this case,
// the object type would be "runm.provider") to the external UUID identifier.
message Object {
    // The object type code this object is
    string object_type_code = 1;
    // The object's globally-unique identifier
    string uuid = 2;
    // The object's human-readable name, unique within the scope of the object
    // type and partition, and optionally the project.
    string name = 3;
    // Incremented each type the object is changed. It will be 1 upon initial
    // creation.
    int64 generation = 4;
    // The UUID of the partition this object is in, or empty string if the
    // object is in global scope
    string partition_uuid = 50;
    // The external identifier of the project this object is owned by. Can be
    // empty if the type of object isn't ownable by a project (for instance, a
    // `runm.provider` isn't ownable by a project, but a `runm.machine` is)
    string project_external_id = 51;
    // The collection of key/value properties associated with the object
    repeated Property properties = 52;
    // The collection of simple string tags associated with the object
    repeated string tags = 53;
}

// Used in matching object records
message ObjectFilter {
    UuidsFilter partition_filter = 1;
    ObjectTypeFilter object_type_filter = 2;
    UuidFilter uuid_filter = 3;
    NameFilter name_filter = 4;
    // The project the object must belong to, if the object type scope of this
    // object is PROJECT
    string project = 5;
    PropertyFilter property_filter = 6;
}
